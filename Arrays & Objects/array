Structured or Compound Data Type

    String Object Constructor    
    -> let str = new String("   ")

    String Literal
    -> let str = "  "


    Array Object Constructor
    -> let arr = new Array("Bob", 3.14, true)

    Array Literal
    -> let arr = [  ]


->  let mix = ["Bob", 3.14, true]

    let name = mix[0]       // Bob
    let num = mix[1]        // 3.14
    let out = mix[3]        // undefined

    mix[0] = "Alice"        // ["Alice", 3.14, true]
    mix[4] = 5              // ["Alice", 3.14, true, undefined, 5]


Nested Array
->  let mix = [ [123, 456, 789], ['Ant', 'Cat', 'Dog'] ]

    let nums = mix[0]       // [ 123, 456, 789 ]
    let animals = mix[1]    // [ 'Ant', 'Cat', 'Dog' ]
    let x = mix[0][1]       // 456
    let rambo = mix[1][2]   // 'Dog'


Array Methods 
    -> arr_name.length        
    -> arr_name.indexOf(arr_value)  
    -> arr_name.join(value like ",", "+")  **
    -> arr_name.map(pointer_value)
    -> arr_name.filter(pointer_value)
    -> arr_name.reduce(accumulative_value, current_value)


    -> arr_name.push(value)       -> LI
    -> arr_name.pop()        -> LO
    -> arr_name.shift()      -> FO
    -> arr_name.unshift(value)    -> FI
    -> arr_name.splice(arr_index, amount) 


    let fruits = ["Apple", "Orange", "Mango", "Banana"]
    fruits.indexOf("Orange")        // 2
    fruits.splice(2, 1)             // fruits → ["Apple", "Orange", "Banana"]
    fruits.join(",")                // result → Apple,Orange,Mango



Array Mapping
->  let nums = [1, 2, 3, 4, 5]
    let result = nums.map(n => n + 1)        // result = [2, 3, 4, 5, 6]

Array Filtering
->  let nums = [1, 2, 3, 4, 5]
    let result = nums.filter(n => n % 2)     // result = [1, 5, 7]

Arrary Method Chaining  (working from left to right)
->  let nums = [1, 2, 3, 4, 5]
    let result = nums.map(n = > n + 1).filter(n => n % 2)        // result = [3, 5, 7]
    let result = [2, 3, 4, 5, 6].reduce((a, n) => a+ n)          // result = 20

Array Reducing
->  let nums = [1, 2, 3, 4, 5]
    let result = nums.reduce((a, n) => a + n)       // result = 15


Array Spreading 
->  let nums = [1, 2, 3]
    let alphas = ['A', 'B', 'C']
    let result = [nums, alphas]         // [ [1, 2, 3], ['a', 'b', 'c'] ]

->  let nums = [1, 2, 3]
    let alphas = ['A', 'B', 'C']
    let result = [...nums, ...alphas]   // [ 1, 2, 3, 'a', 'b', 'c' ]


Array Destructuring
->  let nums = [123, 456]
    let [a, b] = nums

    function add_first(nums[0], nums[1]) {
        return nums[0] + nums[1]
    }
    add_first(...nums)      //

    function add_second([a, b]) {
        return a + b
    }
    add_second(nums)        //


String Object Method   
->  let num = 3.14278990
    num.toFixed(3)      // num = 3.142


    str_name.length
    str_name[str_index]
    str_name.charAt(str_index)
    str_name.toUpperCase()
    str_name.toLowerCase()
    str_name.trim()     
    str_name.substr(str_index, amount)
    str_name.split()


Tweaking JS Standard Object
->  String.prototype.greet = function() {
        return "Hello World"
    }
    str.greet()     // "Hello World"




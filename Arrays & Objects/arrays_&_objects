
Array Object Constructor
-> let mix = new Array("Bob", 3.14, true)

Array Literal
->  let mix = ["Bob", 3.14, true]

    let name = mix[0]       // Bob
    let num = mix[1]        // 3.14
    let out = mix[3]        // undefined

    mix[0] = "Alice"        // ["Alice", 3.14, true]
    mix[4] = 5              // ["Alice", 3.14, true, undefined, 5]


Nested Array
->  let mix = [ [123, 456, 789], ['Ant', 'Cat', 'Dog'] ]

    let nums = mix[0]       // [ 123, 456, 789 ]
    let animals = mix[1]    // [ 'Ant', 'Cat', 'Dog' ]
    let x = mix[0][1]       // 456
    let rambo = mix[1][2]   // 'Dog'


Array Methods 
    -> arr.length(arr_name)   
    -> arr.indexOf(arr_value)  
    -> arr.join(value like ",", "+")
    -> arr.map(pointer_value)
    -> arr.filter(pointer_value)
    -> arr.reduce(accumulative_value, current_value)


    -> arr.push(value)       -> LI
    -> arr.pop()        -> LO
    -> arr.shift()      -> FO
    -> arr.unshift(value)    -> FI
    -> arr.splice(range, amount) 


    let fruits = ["Apple", "Orange", "Mango", "Banana"]
    fruits.indexOf("Orange")        // 2
    fruits.splice(2, 1)             // fruits â†’ ["Apple", "Orange", "Banana"]
    fruits.join(",")                // result â†’ Apple,Orange,Mango



Array Mapping
->  let nums = [1, 2, 3, 4, 5]
    let result = nums.map(n => n + 1)        // result = [2, 3, 4, 5, 6]

Array Filtering
->  let nums = [1, 2, 3, 4, 5]
    let result = nums.filter(n => n % 2)     // result = [1, 5, 7]

Arrary Method Chaining  (working from left to right)
->  let nums = [1, 2, 3, 4, 5]
    let result = nums.map(n = > n + 1).filter(n => n % 2)        // result = [3, 5, 7]
    let result = [2, 3, 4, 5, 6].reduce((a, n) => a+ n)          // result = 20

Array Reducing
->  let nums = [1, 2, 3, 4, 5]
    let result = nums.reduce((a, n) => a + n)       // result = 15


